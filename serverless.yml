service: lastproject
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  # - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x

  tracing:
    lambda: true
    apiGateway: true

  stage: ${env:stage, 'dev'}
  region: ${env:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-Project-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-project-godn-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "dynamodb:PutItem"
  #       - "dynamodb:Get*"
  #       - "dynamodb:Scan*"
  #       - "dynamodb:UpdateItem"
  #       - "dynamodb:DeleteItem"
  #     Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: CreateRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}

  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  createTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          path: todos
          method: post
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': CreateRequest
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem        
        Resource: arn:aws:dynamodb:${env:region, 'us-east-1'}:*:table/${self:provider.environment.TODOS_TABLE}

  getTodo:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          path: todos
          method: get
          cors: true
          documentation:
            summary: Get a new todo
            description: Get a new todo
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query        
        Resource: arn:aws:dynamodb:${env:region, 'us-east-1'}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
  
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:DeleteItem 
          - dynamodb:GetItem       
        Resource: arn:aws:dynamodb:${env:region, 'us-east-1'}:*:table/${self:provider.environment.TODOS_TABLE}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:UpdateItem      
        Resource: arn:aws:dynamodb:${env:region, 'us-east-1'}:*:table/${self:provider.environment.TODOS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
  # getCustomers:
  #   handler: getCustomers.getCustomers
  #   events: 
  #     - httpApi:
  #         path: /
  #         method: get

resources:
  Resources:
  # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosTableProject:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    
    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
        